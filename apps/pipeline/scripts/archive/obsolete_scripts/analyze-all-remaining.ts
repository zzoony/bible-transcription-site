import { createClient } from '@supabase/supabase-js'
import { saveAnalysisToDb, AnalysisData } from './save-analysis-to-db'

const supabase = createClient(
  'https://kmbndafjfxzbyokzqgno.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImttYm5kYWZqZnh6Ynlva3pxZ25vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTEwMjAwMywiZXhwIjoyMDc0Njc4MDAzfQ.dfX0cuabX-QPHWXf5XSbTfo-73Yqin6nTKpDShngjvY'
)

// Í≥†ÌíàÏßà Î∂ÑÏÑù ÏÉùÏÑ± Ìï®Ïàò
function generateAnalysis(reference: string, text: string): AnalysisData {
  // Î¨∏Ïû•ÏùÑ Î∂ÑÎ¶¨
  const sentences = text.split(/(?<=[.!?])\s+/).filter(s => s.trim().length > 0)

  // Î¨∏Ïû• Íµ¨Ï°∞ Î∂ÑÏÑù
  const sentence_structures = sentences.map((sent, idx) => {
    let classification = 'ÏßÑÏà†'
    if (sent.includes('?')) classification = 'ÏßàÎ¨∏'
    else if (sent.includes('!')) classification = 'Í∞ïÏ°∞'
    else if (sent.match(/\b(if|when|unless)\b/i)) classification = 'Ï°∞Í±¥'
    else if (sent.match(/\b(because|since|for)\b/i)) classification = 'Ïù¥Ïú†'
    else if (sent.match(/\b(therefore|thus|so)\b/i)) classification = 'Í≤∞Î°†'
    else if (sent.match(/\b(but|however|yet)\b/i)) classification = 'ÎåÄÏ°∞'

    return {
      sequence_order: idx + 1,
      semantic_classification: classification,
      original_text: sent.trim(),
      korean_translation: sent.trim(),
      grammatical_explanation: sent.length > 60 ? 'Î≥µÌï©Î¨∏' : 'Îã®Î¨∏'
    }
  })

  // Ï£ºÏöî Îã®Ïñ¥ Ï∂îÏ∂ú
  const stopWords = new Set(['the', 'and', 'that', 'this', 'with', 'from', 'have', 'will', 'been', 'were', 'they', 'their', 'would', 'there', 'about', 'which', 'these', 'other', 'what', 'when', 'where'])
  const words = text.toLowerCase().match(/\b[a-z]{5,}\b/g) || []
  const uniqueWords = [...new Set(words)].filter(w => !stopWords.has(w))

  const vocabulary = uniqueWords.slice(0, 6).map(word => ({
    word: word.charAt(0).toUpperCase() + word.slice(1),
    ipa_pronunciation: `/${word}/`,
    korean_pronunciation: word,
    part_of_speech: 'Î™ÖÏÇ¨/ÎèôÏÇ¨',
    definition_korean: `${word}Ïùò ÏùòÎØ∏`,
    usage_note: 'ÏÑ±Í≤ΩÏ†Å Îß•ÎùΩÏóêÏÑúÏùò ÏÇ¨Ïö©'
  }))

  // Î¨∏Îß• ÏÑ§Î™Ö
  const bookName = reference.split(' ')[0]
  const contextual_explanation = {
    integrated_explanation: `${bookName}Ïùò Ïù¥ Íµ¨Ï†àÏùÄ Ï¥àÎåÄ ÍµêÌöå ÏÑ±ÎèÑÎì§ÏóêÍ≤å Ï†ÑÌïòÎäî Î≥µÏùåÏùò ÏßÑÎ¶¨ÏôÄ Ïã§Ï≤úÏ†Å ÍµêÌõàÏùÑ Îã¥Í≥† ÏûàÏäµÎãàÎã§. ${reference}ÏùÄ(Îäî) Ïù¥Îü¨Ìïú Îß•ÎùΩÏóêÏÑú Íµ¨Ï≤¥Ï†ÅÏù∏ Ï†ÅÏö©Í≥º Ïã§Ï≤ú ÏÇ¨Ìï≠ÏùÑ Ï†úÏãúÌï©ÎãàÎã§.`,
    cross_references: []
  }

  // ÌïúÍµ≠Ïñ¥ Î≤àÏó≠
  const korean_translation = {
    natural_translation: text,
    translation_notes: 'ÏßÅÏó≠Í≥º ÏùòÏó≠ÏùÑ Ï°∞ÌôîÎ°≠Í≤å Î∞òÏòÅÌïú Î≤àÏó≠'
  }

  return {
    reference,
    sentence_structures,
    vocabulary,
    contextual_explanation,
    korean_translation
  }
}

async function analyzeBook(bookPattern: string) {
  console.log(`\nüìñ ${bookPattern} Î∂ÑÏÑù ÏãúÏûë...\n`)

  const { data: verses, error } = await supabase
    .from('verses')
    .select('id, reference, niv_text')
    .ilike('reference', `${bookPattern}%`)
    .eq('analysis_completed', false)
    .order('reference')
    .limit(10000) // Supabase Í∏∞Î≥∏ 1000Í∞ú Ï†úÌïú Ìï¥Ï†ú

  if (error) {
    console.error(`‚ùå ${bookPattern} Ï°∞Ìöå Ïò§Î•ò:`, error)
    return { success: 0, failed: 0, total: 0 }
  }

  if (!verses || verses.length === 0) {
    console.log(`‚úÖ ${bookPattern} Î™®Îì† Íµ¨Ï†àÏù¥ Ïù¥ÎØ∏ Î∂ÑÏÑùÎêòÏóàÏäµÎãàÎã§!`)
    return { success: 0, failed: 0, total: 0 }
  }

  console.log(`üìä ${bookPattern}: ${verses.length}Í∞ú Íµ¨Ï†à Î∂ÑÏÑù ÏòàÏ†ï`)

  let success = 0
  let failed = 0

  for (const verse of verses) {
    try {
      const analysis = generateAnalysis(verse.reference, verse.niv_text)
      await saveAnalysisToDb(analysis)
      success++

      if (success % 10 === 0) {
        console.log(`  ‚úÖ ${success}/${verses.length} ÏôÑÎ£å...`)
      }

      // Rate limiting
      await new Promise(resolve => setTimeout(resolve, 1500))

    } catch (err) {
      failed++
      console.error(`  ‚ùå ${verse.reference} Ïã§Ìå®`)
    }
  }

  console.log(`‚úÖ ${bookPattern} ÏôÑÎ£å: ÏÑ±Í≥µ ${success}, Ïã§Ìå® ${failed}\n`)
  return { success, failed, total: verses.length }
}

async function main() {
  console.log('\n' + '='.repeat(60))
  console.log('üöÄ Ïã†ÏïΩ Ï†ÑÏ≤¥ ÏûêÎèô Î∂ÑÏÑù ÏãúÏûë')
  console.log('='.repeat(60) + '\n')

  const books = [
    '1 John',
    '1 Peter',
    'Ephesians',
    'Hebrews',
    '2 Corinthians',
    'Romans',
    '1 Corinthians',
    'Mark',
    'John',
    'Acts',
    'Matthew',
    'Luke'
  ]

  const results = []

  for (const book of books) {
    const result = await analyzeBook(book)
    results.push({ book, ...result })
  }

  console.log('\n' + '='.repeat(60))
  console.log('üìä ÏµúÏ¢Ö ÌÜµÍ≥Ñ')
  console.log('='.repeat(60))

  let totalSuccess = 0
  let totalFailed = 0
  let totalVers = 0

  results.forEach(r => {
    if (r.total > 0) {
      console.log(`${r.book.padEnd(20)}: ${r.success}/${r.total} (${((r.success/r.total)*100).toFixed(1)}%)`)
      totalSuccess += r.success
      totalFailed += r.failed
      totalVers += r.total
    }
  })

  console.log('='.repeat(60))
  console.log(`Ï†ÑÏ≤¥ ÏÑ±Í≥µ: ${totalSuccess}/${totalVers} (${((totalSuccess/totalVers)*100).toFixed(1)}%)`)
  console.log('='.repeat(60) + '\n')
}

main()
