#!/usr/bin/env node

/**
 * Single Verse Analyzer Agent
 * ÏÑ±Í≤Ω Íµ¨Ï†à ÌïòÎÇòÎ•º Î∂ÑÏÑùÌïòÏó¨ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•ÌïòÎäî ÏóêÏù¥Ï†ÑÌä∏
 */

import { Anthropic } from '@anthropic-ai/sdk';
import pg from 'pg';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load environment variables
dotenv.config({ path: join(__dirname, '..', '.env') });

// Initialize Anthropic client
const anthropic = new Anthropic({
    apiKey: process.env.ANTHROPIC_API_KEY,
});

// Initialize PostgreSQL client
const pool = new pg.Pool({
    host: process.env.LOCAL_DB_HOST || 'localhost',
    port: parseInt(process.env.LOCAL_DB_PORT || '5432'),
    database: process.env.LOCAL_DB_NAME || 'bible_transcription',
    user: process.env.LOCAL_DB_USER || 'postgres',
    password: process.env.LOCAL_DB_PASSWORD || 'localdev123',
});

/**
 * ÏÑ±Í≤Ω Íµ¨Ï†à Î∂ÑÏÑù ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ± (ÏÉà ÌòïÏãù v2)
 */
function createAnalysisPrompt(verseReference, nivText) {
    return `[${verseReference}]
NIV: ${nivText}

Please analyze this Bible verse following the new output format v2. Provide a comprehensive linguistic and theological analysis in JSON format with the following structure:

{
  "sentence_structures": [
    {
      "sequence_order": 1,
      "semantic_classification": "ÏùòÎØ∏Ï†Å Î∂ÑÎ•ò (e.g., Î∂ÄÍ∞ÄÏ†Å Í∂åÎ©¥, Î∞òÎ≥µÏùò Ïù¥Ïú† 1)",
      "original_text": "The sentence or clause",
      "korean_translation": "ÌïúÍµ≠Ïñ¥ Î≤àÏó≠",
      "grammatical_explanation": "Î¨∏Î≤ïÏ†Å Íµ¨Ï°∞ ÏÑ§Î™Ö (e.g., Ï†ÑÌôò Î∂ÄÏÇ¨ + Ìò∏Í≤© + Î™ÖÎ†πÎ¨∏ Íµ¨Ï°∞)"
    }
  ],
  "vocabulary": [
    {
      "word": "word",
      "ipa_pronunciation": "[IPA pronunciation]",
      "korean_pronunciation": "ÌïúÍ∏Ä Î∞úÏùå",
      "part_of_speech": "noun|verb|adjective|adverb|etc",
      "definition_korean": "ÌïúÍµ≠Ïñ¥ Ï†ïÏùò Î∞è ÏÑ§Î™Ö"
    }
  ],
  "contextual_explanation": {
    "integrated_explanation": "Ïó≠ÏÇ¨Ï†Å/Ïã†ÌïôÏ†Å/Î¨∏ÌïôÏ†Å Î∞∞Í≤ΩÏùÑ ÌÜµÌï©Ìïú ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏÑ§Î™Ö",
    "cross_references": ["verse1", "verse2"]
  },
  "korean_translation": {
    "natural_translation": "Í∑†Ìòï Ïû°Ìûå ÏûêÏó∞Ïä§Îü¨Ïö¥ Î≤àÏó≠"
  },
  "special_explanations": [
    {
      "explanation_type": "grammar|interpretation|linguistic_note",
      "content": "Î¨∏Î≤ïÏ†Å/Ìï¥ÏÑùÏ†Å ÌäπÏù¥Ï†êÏù¥ÎÇò Ï£ºÎ™©Ìï† Ï†êÎì§"
    }
  ]
}

Requirements:
1. ÏùòÎØ∏Ï†Å Î∂ÑÎ•ò: Î¨∏Ïû•ÏùÑ ÏùòÎØ∏ Îã®ÏúÑÎ°ú Î∂ÑÎ•ò (Î∂ÄÍ∞ÄÏ†Å Í∂åÎ©¥, Î∞òÎ≥µÏùò Ïù¥Ïú† Îì±)
2. Î¨∏Î≤ïÏ†Å ÏÑ§Î™Ö: Í∞Å Î¨∏Ïû•Ïùò Î¨∏Î≤ïÏ†Å Íµ¨Ï°∞Î•º Í∞ÑÎã®Ìûà ÏÑ§Î™Ö
3. IPA + ÌïúÍµ≠Ïñ¥ Î∞úÏùå: Îëò Îã§ Ï†úÍ≥µ (Î™ÖÏÇ¨Íµ¨Îäî IPA null Í∞ÄÎä•)
4. ÌÜµÌï©Îêú Î¨∏Îß• ÏÑ§Î™Ö: Ïó≠ÏÇ¨Ï†Å/Ïã†ÌïôÏ†Å/Î¨∏ÌïôÏ†Å ÎÇ¥Ïö©ÏùÑ ÌïòÎÇòÎ°ú ÌÜµÌï©
5. ÏûêÏó∞Ïä§Îü¨Ïö¥ Î≤àÏó≠: ÏßÅÏó≠/ÏùòÏó≠ Íµ¨Î∂Ñ ÏóÜÏù¥ Í∑†Ìòï Ïû°Ìûå Î≤àÏó≠
6. ÌäπÎ≥Ñ ÏÑ§Î™Ö: Î¨∏Î≤ïÏ†Å/Ìï¥ÏÑùÏ†Å ÌäπÏù¥Ï†ê Ï§ëÏã¨
7. Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï†úÏô∏: Î≥µÏû°ÎèÑ Ï†êÏàò, ÌïµÏã¨ Ï£ºÏ†ú Îì± Ï†úÏô∏

Return ONLY the JSON object, no additional text.`;
}

/**
 * Claude APIÎ•º ÌÜµÌï¥ Íµ¨Ï†à Î∂ÑÏÑù
 */
async function analyzeVerse(verseReference, nivText) {
    console.log(`üìñ Analyzing ${verseReference}...`);

    try {
        const response = await anthropic.messages.create({
            model: 'claude-3-5-sonnet-20241022',
            max_tokens: 8000,
            messages: [{
                role: 'user',
                content: createAnalysisPrompt(verseReference, nivText)
            }]
        });

        const analysisText = response.content[0].text;
        return JSON.parse(analysisText);
    } catch (error) {
        console.error(`‚ùå Error analyzing verse: ${error.message}`);
        throw error;
    }
}

/**
 * Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•
 */
async function saveAnalysisToDatabase(verseId, analysis) {
    const client = await pool.connect();

    try {
        await client.query('BEGIN');

        // 1. Delete existing data for this verse (v2 schema)
        await client.query('DELETE FROM sentence_structures WHERE verse_id = $1', [verseId]);
        await client.query('DELETE FROM vocabulary WHERE verse_id = $1', [verseId]);
        await client.query('DELETE FROM contextual_explanations WHERE verse_id = $1', [verseId]);
        await client.query('DELETE FROM korean_translations WHERE verse_id = $1', [verseId]);
        await client.query('DELETE FROM special_explanations WHERE verse_id = $1', [verseId]);

        // 2. Insert sentence structures (v2 schema)
        for (const sentence of analysis.sentence_structures) {
            await client.query(`
                INSERT INTO sentence_structures
                (verse_id, sequence_order, semantic_classification, original_text, korean_translation, grammatical_explanation)
                VALUES ($1, $2, $3, $4, $5, $6)
            `, [
                verseId,
                sentence.sequence_order,
                sentence.semantic_classification,
                sentence.original_text,
                sentence.korean_translation,
                sentence.grammatical_explanation
            ]);
        }

        // 3. Insert vocabulary (v2 schema)
        for (const vocab of analysis.vocabulary) {
            await client.query(`
                INSERT INTO vocabulary
                (verse_id, word, ipa_pronunciation, korean_pronunciation, part_of_speech, definition_korean)
                VALUES ($1, $2, $3, $4, $5, $6)
            `, [
                verseId,
                vocab.word,
                vocab.ipa_pronunciation,
                vocab.korean_pronunciation,
                vocab.part_of_speech,
                vocab.definition_korean
            ]);
        }

        // 4. Insert contextual explanation (v2 schema)
        const contextual = analysis.contextual_explanation;
        await client.query(`
            INSERT INTO contextual_explanations
            (verse_id, integrated_explanation, cross_references)
            VALUES ($1, $2, $3)
            ON CONFLICT (verse_id) DO UPDATE SET
                integrated_explanation = $2,
                cross_references = $3
        `, [
            verseId,
            contextual.integrated_explanation,
            contextual.cross_references
        ]);

        // 5. Insert Korean translation (v2 schema)
        const trans = analysis.korean_translation;
        await client.query(`
            INSERT INTO korean_translations
            (verse_id, natural_translation)
            VALUES ($1, $2)
            ON CONFLICT (verse_id) DO UPDATE SET
                natural_translation = $2
        `, [
            verseId,
            trans.natural_translation
        ]);

        // 6. Insert special explanations (v2 schema)
        for (const explanation of analysis.special_explanations) {
            await client.query(`
                INSERT INTO special_explanations
                (verse_id, explanation_type, content)
                VALUES ($1, $2, $3)
            `, [
                verseId,
                explanation.explanation_type,
                explanation.content
            ]);
        }

        // 7. Analysis metadata removed in v2 schema

        // 8. Mark verse as analyzed
        await client.query(`
            UPDATE verses
            SET analysis_completed = true, updated_at = NOW()
            WHERE id = $1
        `, [verseId]);

        await client.query('COMMIT');
        console.log(`‚úÖ Analysis saved for verse ID ${verseId}`);

    } catch (error) {
        await client.query('ROLLBACK');
        console.error(`‚ùå Error saving to database: ${error.message}`);
        throw error;
    } finally {
        client.release();
    }
}

/**
 * Íµ¨Ï†à Ï†ïÎ≥¥ Ï°∞Ìöå ÎòêÎäî ÏÉùÏÑ±
 */
async function getOrCreateVerse(bookName, chapter, verseNumber, nivText) {
    const client = await pool.connect();

    try {
        // Check if verse exists
        const checkResult = await client.query(`
            SELECT v.id, v.niv_text, v.analysis_completed
            FROM verses v
            JOIN chapters c ON v.chapter_id = c.id
            JOIN books b ON v.book_id = b.id
            WHERE b.name_english = $1
            AND c.chapter_number = $2
            AND v.verse_number = $3
        `, [bookName, chapter, verseNumber]);

        if (checkResult.rows.length > 0) {
            return checkResult.rows[0];
        }

        // Create verse if it doesn't exist
        const reference = `${bookName} ${chapter}:${verseNumber}`;

        const insertResult = await client.query(`
            INSERT INTO verses (book_id, chapter_id, verse_number, reference, niv_text)
            SELECT b.id, c.id, $3, $4, $5
            FROM books b
            JOIN chapters c ON c.book_id = b.id
            WHERE b.name_english = $1 AND c.chapter_number = $2
            RETURNING id
        `, [bookName, chapter, verseNumber, reference, nivText]);

        return {
            id: insertResult.rows[0].id,
            niv_text: nivText,
            analysis_completed: false
        };

    } finally {
        client.release();
    }
}

/**
 * Main execution function
 */
async function main() {
    // Parse command line arguments
    const args = process.argv.slice(2);

    if (args.length < 4) {
        console.log('Usage: node single_verse_analyzer.js <book> <chapter> <verse> "<NIV text>"');
        console.log('Example: node single_verse_analyzer.js Philippians 3 2 "Watch out for those dogs..."');
        process.exit(1);
    }

    const bookName = args[0];
    const chapter = parseInt(args[1]);
    const verseNumber = parseInt(args[2]);
    const nivText = args.slice(3).join(' ');

    try {
        // Get or create verse
        const verse = await getOrCreateVerse(bookName, chapter, verseNumber, nivText);

        if (verse.analysis_completed) {
            console.log(`‚ÑπÔ∏è Verse ${bookName} ${chapter}:${verseNumber} already analyzed. Skipping.`);

            // Optionally re-analyze if --force flag is provided
            if (!args.includes('--force')) {
                return;
            }
            console.log('üîÑ Re-analyzing due to --force flag...');
        }

        // Analyze verse
        const reference = `${bookName} ${chapter}:${verseNumber}`;
        const analysis = await analyzeVerse(reference, nivText);

        // Save to database
        await saveAnalysisToDatabase(verse.id, analysis);

        console.log(`‚ú® Successfully analyzed ${reference}`);

    } catch (error) {
        console.error(`‚ùå Error in main: ${error.message}`);
        process.exit(1);
    } finally {
        await pool.end();
    }
}

// Run if executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
    main();
}

export { analyzeVerse, saveAnalysisToDatabase, getOrCreateVerse };